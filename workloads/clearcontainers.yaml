---
base_image_url: https://cloud-images.ubuntu.com/xenial/current/xenial-server-cloudimg-amd64-disk1.img
base_image_name: Ubuntu 16.04
hostname: singlevm
...
---
{{with .GoPath}}
mounts:
- tag: hostgo
  security_model: none
  path: {{.}}
{{end}}
...
---
{{- define "ENV" -}}
{{proxyVars .}}
{{- print " DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true " -}}
{{end}}
{{ define "GOPATH" }}{{with .GoPath}}{{$.MountPath "hostgo"}}{{else}}/home/{{.User}}/go{{end}}{{end}}
#cloud-config
write_files:
{{- if len $.HTTPProxy }}
 - content: |
     [Service]
     Environment="HTTP_PROXY={{$.HTTPProxy}}"{{if len .HTTPSProxy}} "HTTPS_PROXY={{.HTTPSProxy}}{{end}}"{{if len .NoProxy}} "NO_PROXY={{.NoProxy}},{{.Hostname}}{{end}}"
   path: /etc/systemd/system/docker.service.d/http-proxy.conf
{{- end}}
{{with proxyEnv . 5}}
 - content: |
{{.}}
   path: /etc/environment
{{end}}
 - content: |
     [Service]
     ExecStart=
     ExecStart=/usr/bin/dockerd -D --add-runtime cor=/usr/bin/cc-oci-runtime --default-runtime=cor
   path: /etc/systemd/system/docker.service.d/clr-containers.conf
 - content: |
     #!/bin/sh
     printf "\n"
     printf "\n"
     printf "Your go code is at {{template "GOPATH" .}}\n"
     printf "You can also edit your code on your host system \n"
     printf "To build cc-oci-runtime from sources \n"
     printf "go get -d github.com/01org/cc-oci-runtime/... \n"
     printf "cd {{template "GOPATH" .}}/src/github.com/01org/cc-oci-runtime \n"
     printf "./autogen.sh --with-cc-kernel=/usr/share/clear-containers/vmlinux.container --with-cc-image=/usr/share/clear-containers/clear-containers.img \n"
     printf "make \n"
     printf "make check \n"
     printf "make install \n"
     printf "\n"
     printf "\n"
   path: /etc/update-motd.d/10-ciao-help-text
   permissions: '0755'
 - content: |
     deb https://apt.dockerproject.org/repo ubuntu-xenial main
   path: /etc/apt/sources.list.d/docker.list

apt:
{{- if len $.HTTPProxy }}
  proxy: "{{$.HTTPProxy}}"
{{- end}}
{{- if len $.HTTPSProxy }}
  https_proxy: "{{$.HTTPSProxy}}"
{{- end}}
package_upgrade: {{with .PackageUpgrade}}{{.}}{{else}}true{{end}}

runcmd:
 - {{beginTask . "Booting VM"}}
 - {{endTaskOk . }}

 - {{beginTask . (printf "Adding %s to /etc/hosts" .Hostname) }}
 - echo "127.0.0.1 {{.Hostname}}" >> /etc/hosts
 - {{endTaskCheck .}}

{{range .Mounts}}
 - mkdir -p {{.Path}}
 - sudo chown {{$.User}}:{{$.User}} {{.Tag}}
 - echo "{{.Tag}} {{.Path}} 9p x-systemd.automount,x-systemd.device-timeout=10,nofail,trans=virtio,version=9p2000.L 0 0" >> /etc/fstab
{{end}}
{{range .Mounts}}
 - {{beginTask $ (printf "Mounting %s" .Path) }}
 - mount {{.Path}}
 - {{endTaskCheck $}}
{{end}}

 - chown {{.User}}:{{.User}} /home/{{.User}}
 - rm /etc/update-motd.d/10-help-text /etc/update-motd.d/51-cloudguest
 - rm /etc/update-motd.d/90-updates-available
 - rm /etc/legal

 - {{beginTask . "Booting VM"}}
 - {{endTaskOk . }}

 - echo "GOPATH=\"{{template "GOPATH" .}}\"" >> /etc/environment
 - echo "PATH=\"$PATH:/usr/local/go/bin:{{template "GOPATH" .}}/bin:/usr/local/nodejs/bin\""  >> /etc/environment

 - {{beginTask . "Downloading Go" }}
 - {{download . "https://storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz" "/tmp/go1.7.4.linux-amd64.tar.gz"}}
 - {{endTaskCheck .}}

 - {{beginTask . "Unpacking Go" }}
 - tar -C /usr/local -xzf /tmp/go1.7.4.linux-amd64.tar.gz
 - {{endTaskCheck .}}
 
 - rm /tmp/go1.7.4.linux-amd64.tar.gz

 - groupadd docker
 - sudo gpasswd -a {{.User}} docker

 - {{beginTask . "Installing apt-transport-https and ca-certificates" }}
 - {{template "ENV" .}}sudo apt-get -y install  apt-transport-https ca-certificates
 - {{endTaskCheck .}}

 - {{beginTask . "Add docker GPG key" }}
 - {{template "ENV" .}}curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
 - {{endTaskCheck .}}

 - {{beginTask . "Adding docker repo"}}
 - {{template "ENV" .}} sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
 - {{endTaskCheck .}}

 - {{beginTask . "Add Clear Containers OBS Repository "}}
 - sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/clearlinux:/preview:/clear-containers-2.1/xUbuntu_16.04/ /' >> /etc/apt/sources.list.d/cc-oci-runtime.list"
 - {{template "ENV" .}}curl -fsSL http://download.opensuse.org/repositories/home:clearlinux:preview:clear-containers-2.1/xUbuntu_16.04/Release.key | sudo apt-key add -
 - {{endTaskCheck .}}

 - {{beginTask . "Retrieving updated list of packages"}}
 - {{template "ENV" .}}sudo apt-get update
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Clear Containers Runtime"}}
 - {{template "ENV" .}}sudo apt-get install cc-oci-runtime -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Docker"}}
 - {{template "ENV" .}}sudo apt-get install -y --allow-downgrades --allow-unauthenticated docker-engine=1.12.1-0~xenial
 - {{endTaskCheck .}}

 - {{beginTask . "Start Clear Containers Runtime"}}
 - sudo systemctl daemon-reload
 - sudo systemctl restart docker
 - sudo systemctl enable cc-proxy.socket
 - sudo systemctl start cc-proxy.socket
 - {{endTaskCheck .}}

 - {{beginTask . "Installing GCC"}}
 - {{template "ENV" .}}apt-get install gcc -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Make"}}
 - {{template "ENV" .}}apt-get install make -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing QEMU" }}
 - {{template "ENV" .}}apt-get install qemu-system-x86 -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing xorriso"}}
 - {{template "ENV" .}}apt-get install xorriso -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Clear Containers development tools"}}
 - {{template "ENV" .}}apt-get install build-essential python zlib1g-dev libcap-ng-dev libglib2.0-dev libpixman-1-dev libattr1-dev libcap-dev autoconf libtool libjson-glib-dev uuid-dev check bats libdevmapper-dev file apt-utils wget valgrind lcov libmnl-dev cppcheck libtap-formatter-html-perl -y
 - {{endTaskCheck .}}

 - {{beginTask . "Auto removing unused development components"}}
 - {{template "ENV" .}}apt-get auto-remove -y
 - {{endTaskCheck .}}

 - {{beginTask . "Installing Go development utils"}}
 - sudo -u {{.User}} {{template "ENV" .}} GOPATH={{template "GOPATH" .}} /usr/local/go/bin/go get github.com/mattn/goveralls golang.org/x/tools/cmd/cover github.com/pierrre/gotestcover github.com/fzipp/gocyclo github.com/gordonklaus/ineffassign github.com/golang/lint/golint github.com/client9/misspell/cmd/misspell github.com/01org/ciao/test-cases github.com/opencontainers/runc/libcontainer/configs
 - {{endTaskCheck .}}

 - chown {{.User}}:{{.User}} -R {{template "GOPATH" .}}

{{if len .GitUserName}}
 - {{beginTask . "Setting git user.name"}}
 - sudo -u {{.User}} git config --global user.name "{{.GitUserName}}"
 - {{endTaskCheck .}}
{{end}}

{{if len .GitEmail}}
 - {{beginTask . "Setting git user.email"}}
 - sudo -u {{.User}} git config --global user.email {{.GitEmail}}
 - {{endTaskCheck .}}
{{end}}

 - {{finished .}}

users:
  - name: {{.User}}
    gecos: CC Demo User
    lock-passwd: true
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh-authorized-keys:
    - {{.PublicKey}}
...