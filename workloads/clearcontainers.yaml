{{- define "ENV" -}}
{{if len .HTTPSProxy }}https_proxy={{.HTTPSProxy}} {{end -}}
{{if len .HTTPProxy }}http_proxy={{.HTTPProxy}} {{end -}}
{{print "DEBIAN_FRONTEND=noninteractive DEBCONF_NONINTERACTIVE_SEEN=true " -}}
{{end}}
{{- define "CHECK" -}}
if [ $? -eq 0 ] ; then ret="OK" ; else ret="FAIL" ; fi ; curl -X PUT -d $ret 10.0.2.2:{{.HTTPServerPort -}}
{{end -}}
{{- define "OK" -}}
curl -X PUT -d "OK" 10.0.2.2:{{.HTTPServerPort -}}
{{end -}}
#cloud-config
mounts:
{{range .Mounts}} - [{{.Tag}}, {{.Path}}, 9p, "x-systemd.automount,x-systemd.device-timeout=10,nofail,trans=virtio,version=9p2000.L", "0", "0"]
{{end -}}
write_files:
{{- if len $.HTTPProxy }}
 - content: |
     [Service]
     Environment="HTTP_PROXY={{$.HTTPProxy}}"{{if len .HTTPSProxy}} "HTTPS_PROXY={{.HTTPSProxy}}{{end}}"{{if len .NoProxy}} "NO_PROXY={{.NoProxy}},singlevm{{end}}"
   path: /etc/systemd/system/docker.service.d/http-proxy.conf
{{- end}}
 - content: |
     [Service]
     ExecStart=
     ExecStart=/usr/bin/dockerd -D --add-runtime cor=/usr/bin/cc-oci-runtime --default-runtime=cor
   path: /etc/systemd/system/docker.service.d/clr-containers.conf
 - content: |
     #!/bin/sh
     printf "\n"
     printf "\n"
     printf "Your go code is at {{.MountPath "hostgo"}}\n"
     printf "You can also edit your code on your host system \n"
     printf "To build cc-oci-runtime from sources \n"
     printf "go get -d github.com/01org/cc-oci-runtime/... \n"
     printf "cd {{.MountPath "hostgo"}}/src/github.com/01org/cc-oci-runtime \n"
     printf "./autogen.sh --with-cc-kernel=/usr/share/clear-containers/vmlinux.container --with-cc-image=/usr/share/clear-containers/clear-containers.img \n"
     printf "make \n"
     printf "make check \n"
     printf "make install \n"
     printf "\n"
     printf "\n"
   path: /etc/update-motd.d/10-ciao-help-text
   permissions: '0755'
 - content: |
     deb https://apt.dockerproject.org/repo ubuntu-xenial main
   path: /etc/apt/sources.list.d/docker.list

apt:
{{- if len $.HTTPProxy }}
  proxy: "{{$.HTTPProxy}}"
{{- end}}
{{- if len $.HTTPSProxy }}
  https_proxy: "{{$.HTTPSProxy}}"
{{- end}}
package_upgrade: true

runcmd:
 - echo "127.0.0.1 singlevm" >> /etc/hosts
 - mount hostgo
 - chown {{.User}}:{{.User}} /home/{{.User}}
 - rm /etc/update-motd.d/10-help-text /etc/update-motd.d/51-cloudguest
 - rm /etc/update-motd.d/90-updates-available
 - rm /etc/legal
 - curl -X PUT -d "Booting VM" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "OK" .}}
{{if len $.HTTPProxy }}
 - echo "HTTP_PROXY=\"{{.HTTPProxy}}\"" >> /etc/environment
 - echo "http_proxy=\"{{.HTTPProxy}}\"" >> /etc/environment
{{end -}}
{{- if len $.HTTPSProxy }}
 - echo "HTTPS_PROXY=\"{{.HTTPSProxy}}\"" >> /etc/environment
 - echo "https_proxy=\"{{.HTTPSProxy}}\"" >> /etc/environment
{{end}}
{{- if or (len .HTTPSProxy) (len .HTTPProxy) }}
 - echo "no_proxy=\"{{if len .NoProxy}}{{.NoProxy}},{{end}}singlevm\""  >> /etc/environment
{{end}}

 - echo "GOPATH=\"{{.MountPath "hostgo"}}\"" >> /etc/environment
 - echo "PATH=\"$PATH:/usr/local/go/bin:{{.MountPath "hostgo"}}/bin:/usr/local/nodejs/bin\""  >> /etc/environment

 - curl -X PUT -d "Downloading Go" 10.0.2.2:{{.HTTPServerPort}}
 - {{download . "https://storage.googleapis.com/golang/go1.7.4.linux-amd64.tar.gz" "/tmp/go1.7.4.linux-amd64.tar.gz"}}
 - {{template "CHECK" .}}
 - curl -X PUT -d "Unpacking Go" 10.0.2.2:{{.HTTPServerPort}}
 - tar -C /usr/local -xzf /tmp/go1.7.4.linux-amd64.tar.gz
 - {{template "CHECK" .}}
 - rm /tmp/go1.7.4.linux-amd64.tar.gz

 - groupadd docker
 - sudo gpasswd -a {{.User}} docker
 - curl -X PUT -d "Installing apt-transport-https and ca-certificates" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}sudo apt-get -y install  apt-transport-https ca-certificates
 - {{template "CHECK" .}}

 - curl -X PUT -d "Add docker GPG key" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
 - {{template "CHECK" .}}

 - curl -X PUT -d "Adding docker repo" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}} sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

 - curl -X PUT -d "Add Clear Containers OBS Repository " 10.0.2.2:{{.HTTPServerPort}}
 - sudo sh -c "echo 'deb http://download.opensuse.org/repositories/home:/clearlinux:/preview:/clear-containers-2.1/xUbuntu_16.04/ /' >> /etc/apt/sources.list.d/cc-oci-runtime.list"
 - {{template "ENV" .}}curl -fsSL http://download.opensuse.org/repositories/home:clearlinux:preview:clear-containers-2.1/xUbuntu_16.04/Release.key | sudo apt-key add -
 - {{template "CHECK" .}}

 - curl -X PUT -d "Retrieving updated list of packages" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}sudo apt-get update
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing Clear Containers Runtime" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}sudo apt-get install cc-oci-runtime -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing Docker" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}sudo apt-get install -y --allow-downgrades --allow-unauthenticated docker-engine=1.12.1-0~xenial
 - {{template "CHECK" .}}


 - curl -X PUT -d "Start Clear Containers Runtime" 10.0.2.2:{{.HTTPServerPort}}
 - sudo systemctl daemon-reload
 - sudo systemctl restart docker
 - sudo systemctl enable cc-proxy.socket
 - sudo systemctl start cc-proxy.socket
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing GCC" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}apt-get install gcc -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing Make" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}apt-get install make -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing QEMU" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}apt-get install qemu-system-x86 -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing xorriso" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}apt-get install xorriso -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing Clear Containers development tools" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}apt-get install build-essential python zlib1g-dev libcap-ng-dev libglib2.0-dev libpixman-1-dev libattr1-dev libcap-dev autoconf libtool libjson-glib-dev uuid-dev check bats libdevmapper-dev file apt-utils wget valgrind lcov libmnl-dev cppcheck libtap-formatter-html-perl -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Auto removing unused development components" 10.0.2.2:{{.HTTPServerPort}}
 - {{template "ENV" .}}apt-get auto-remove -y
 - {{template "CHECK" .}}

 - curl -X PUT -d "Installing Go development utils" 10.0.2.2:{{.HTTPServerPort}}
 - sudo -u {{.User}} {{template "ENV" .}} GOPATH={{.MountPath "hostgo"}} /usr/local/go/bin/go get github.com/mattn/goveralls golang.org/x/tools/cmd/cover github.com/pierrre/gotestcover github.com/fzipp/gocyclo github.com/gordonklaus/ineffassign github.com/golang/lint/golint github.com/client9/misspell/cmd/misspell github.com/01org/ciao/test-cases github.com/opencontainers/runc/libcontainer/configs
 - {{template "CHECK" .}}

 - chown {{.User}}:{{.User}} -R {{.MountPath "hostgo"}}

{{if len .GitUserName}}
 - curl -X PUT -d "Setting git user.name" 10.0.2.2:{{.HTTPServerPort}}
 - sudo -u {{.User}} git config --global user.name "{{.GitUserName}}"
 - {{template "CHECK" .}}
{{end}}
{{if len .GitEmail}}
 - curl -X PUT -d "Setting git user.email" 10.0.2.2:{{.HTTPServerPort}}
 - sudo -u {{.User}} git config --global user.email {{.GitEmail}}
 - {{template "CHECK" .}}
{{end}}

 - curl -X PUT -d "FINISHED" 10.0.2.2:{{.HTTPServerPort}}

users:
  - name: {{.User}}
    gecos: CIAO Demo User
    lock-passwd: true
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    ssh-authorized-keys:
    - {{.PublicKey}}
